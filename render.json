{
  "id": "https://ff6347.ninja/schemas/render.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "JSON Schema for render.yaml IAC files",
  "description": "",
  "type": "object",
  "additionalProperties": false,
  "required": ["services"],
  "properties": {
    "databases": {
      "type": "array",
      "items": { "$ref": "#/definitions/Databases" }
    },
    "services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Services"
      }
    },
    "envVarGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EnvVarGroup"
      }
    }
  },
  "definitions": {
    "Services": {
      "type": "object",
      "required": ["name", "type", "env"],
      "description": "Each service should have a `type`, `name`, and `env`. Cron jobs must have a `schedule`. Each service should have a `startCommand` unless it’s a Docker service. For Docker services, Render users the command in your Dockerfile. This can be overridden by specifying dockerCommand in your service definition.",
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "cron" } } },
          "then": { "properties": { "schedule": { "optional": false } } }
        },
        {
          "if": { "properties": { "env": { "const": "docker" } } },
          "then": { "properties": { "startCommand": { "optional": true } } },
          "else": { "properties": { "startCommand": { "optional": false } } }
        }
      ],
      "properties": {
        "name": { "type": "string" },
        "type": {
          "type": "string",
          "enum": ["pserv", "web", "worker", "cron"],
          "description": "The service type must be one of the following: 'web' for a web service, 'worker' for a background worker, 'pserv' for a private service, 'cron' for a cron job. A static site is not considered a service type. It is a web service with a static environment."
        },
        "env": {
          "type": "string",
          "description": "The service environment must be one of the following: `docker`, `elixir`, `go`, `node`, `python`, `ruby`, `rust`, `static`",
          "enum": [
            "docker",
            "elixir",
            "go",
            "node",
            "python",
            "ruby",
            "rust",
            "static"
          ]
        },
        "region": {
          "type": "string",
          "enum": ["frankfurt", "oregon"],
          "default": "oregon",
          "description": "A service can be deployed in a specific `region` by adding an optional `region` field. If specified, the `region` field must be one of following: `oregon`, `frankfurt`. If not specified, the region defaults to oregon."
        },
        "repo": {
          "type": "string",
          "format": "uri",
          "qt-uri-protocols": ["https", "http"],
          "qt-uri-extensions": [".git"],
          "description": "Services in render.yaml can omit a repo. If a repo is missing, it is assumed to be the repo the YAML file is in. The specified repo must be accessible to you. You can also omit a branch. Render will use the repo’s default branch if it’s omitted."
        },
        "plan": { "$ref": "#/definitions/Plan" },
        "branch": {
          "type": "string",
          "description": "Services in render.yaml can omit a repo. If a repo is missing, it is assumed to be the repo the YAML file is in. The specified repo must be accessible to you. You can also omit a branch. Render will use the repo’s default branch if it’s omitted."
        },
        "dockerCommand": {
          "type": "string",
          "description": "For Docker services, Render users the command in your Dockerfile. This can be overridden by specifying dockerCommand in your service definition."
        },
        "healthCheckPath": {
          "type": "string",
          "description": "You can set a health check path for your HTTP service for zero downtime deploys by adding the `healthCheckPath` field."
        },
        "numInstances": {
          "type": "integer",
          "description": "You can set the number of instances you want for your service by setting the `numInstances` field."
        },
        "buildCommand": {
          "type": "string",
          "description": "e.g. `npm run build`"
        },
        "startCommand": {
          "type": "string",
          "description": "e.g. `npm start` or `node index.js`"
        },
        "domains": {
          "type": "array",
          "description": "You can specify custom domains for your service in the domains field. If a domain is an apex domain, a www. subdomain will be added automatically and will redirect to the apex domain. If a domain is a www. subdomain, the apex domain will be added automatically and will redirect to the www. domain.  Every web service is always accessible at its .onrender.com subdomain.",
          "items": {
            "type": "string",
            "format": "hostname"
          }
        },
        "autoDeploy": {
          "type": "boolean",
          "optional": true
        },
        "schedule": {
          "type": "string",
          "description": "Cron jobs must have a `schedule`."
        },
        "dockerfilePath": {
          "type": "string",
          "description": "If your service is Docker-based, i.e. it has env: docker, then you can optionally specify the dockerfilePath and dockerContext. These are relative to your repo root. This is useful for mono-repo Docker services."
        },
        "dockerContext": {
          "type": "string",
          "description": "If your service is Docker-based, i.e. it has env: docker, then you can optionally specify the dockerfilePath and dockerContext. These are relative to your repo root. This is useful for mono-repo Docker services."
        },
        "staticPublishPath": {
          "type": "string"
        },
        "pullRequestPreviewsEnabled": {
          "type": "boolean",
          "optional": true
        },
        "disk": {
          "$ref": "#/definitions/Disk"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Header"
          }
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          }
        },
        "envVars": {
          "type": "array",
          "description": "You can define environment groups in your YAML file. Environment groups can have zero or more environment variables. The environment variables in an environment group cannot depend on other resources, unlike the environment variables in a service. However, you can still generate environment variables within an environment group.",
          "items": {
            "$ref": "#/definitions/EnvVar"
          }
        }
      }
    },
    "Header": {
      "type": "object",
      "description": "You can specify HTTP headers for your static site with the headers field like you can in the dashboard.",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": ["name", "path", "value"],
      "title": "Header"
    },
    "Route": {
      "type": "object",
      "description": "You can specify redirect and rewrite routes for your static site with the routes field just like in the dashboard.",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        }
      },
      "required": ["destination", "source", "type"],
      "title": "Route"
    },
    "Databases": {
      "type": "object",
      "additionalProperties": false,
      "description": "You can create databases by defining them in render.yaml. A database only needs a name — all other fields are optional. You can also set the PostgreSQL databaseName, user, and plan.",
      "properties": {
        "name": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "databaseName": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "ipAllowList": {
          "optional": true,
          "description": "You can specify which IP addresses can access your database from outside Render’s network using an ipAllowList. optional (defaults to allow all)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAllowList"
          }
        }
      },
      "required": ["name"],
      "title": "Databases"
    },
    "EnvVar": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "key": {
          "type": "string",
          "optional": false
        },
        "fromService": {
          "$ref": "#/definitions/FromService"
        },
        "fromGroup": {
          "type": "string"
        },
        "generateValue": {
          "type": "boolean"
        },
        "sync": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        },
        "fromDatabase": {
          "$ref": "#/definitions/FromDatabase"
        }
      },
      "required": [],
      "title": "ServiceEnvVar"
    },
    "FromDatabase": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "property": {
          "type": "string"
        }
      },
      "required": ["name", "property"],
      "title": "FromDatabase"
    },
    "IPAllowList": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "source": {
          "type": "string",
          "format": "ipv4"
        },
        "description": {
          "type": "string"
        }
      },
      "required": ["description", "source"],
      "title": "IPAllowList"
    },
    "FromService": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "envVarKey": {
          "type": "string"
        }
      },
      "required": ["name", "type"],
      "title": "FromService"
    },
    "EnvVarGroup": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "envVars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvVar"
          }
        }
      },
      "required": ["envVars", "name"],
      "title": "EnvVarGroup"
    },
    "Disk": {
      "type": "object",
      "description": "You can specify whether your service has a Disk attached to it. A disk must have a `name`, `mountPath`, and (optionally) a size in GB (`sizeGB`).",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "mountPath": {
          "type": "string"
        },
        "sizeGB": {
          "type": "integer",
          "optional": true
        }
      },
      "required": ["mountPath", "name"],
      "title": "Disk"
    },
    "Plan": {
      "type": "string",
      "description": "The service plan can be specified by name and is case insensitive. If it’s omitted, the plan will default to the “Starter” plan. The following values are valid for plans: `Starter`, `Starter Plus`, `Standard`, `Standard Plus`, `Pro`, `Pro Plus`",
      "enum": [
        "Starter",
        "Starter Plus",
        "Standard",
        "Standard Plus",
        "Pro",
        "Pro Plus"
      ]
    }
  }
}
